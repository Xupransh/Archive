/*
ECE 220 Honors Spring 2018

Machine Problem 5: Using functions to draw a picture

Steven S. Lumetta
Charles Zega
Saransh Sinha

*/




#include <stdio.h>

#include "mp5.h"

/*
	You must write all your code only in this file, for all the functions!
*/




int32_t near_horizontal(int32_t x_start, int32_t y_start, int32_t x_end, int32_t y_end){
/* Your code goes here!*/
	int32_t dx, dy, x_1, y_1, x_A, x_B, x, y, retval = 1;

	if(x_start == x_end) return draw_dot(x_start, y_start);
	if (y_start < y_end) {
		dx = x_end - x_start;
		dy = y_end - y_start;
		x_1 = x_start;
		y_1 = y_start;
	} else {
		dx = x_start - x_end;
		dy = y_start - y_end;
		x_1 = x_end;
		y_1 = y_end;
	}
	if(x_start < x_end){
		x_A = x_start;
		x_B = x_end;
	}
	else{
		x_B = x_start;
		x_A = x_end;
	}
	for(x = x_B; x >= x_A; x--){
		y = (2 * dy * (x - x_1) + dx) / (2 * dx) + y_1;
		retval &= draw_dot(x, y);
	}
	return retval;
}

int32_t near_vertical(int32_t x_start, int32_t y_start, int32_t x_end, int32_t y_end){
/* Your code goes here!*/
	int32_t dx, dy, x_1, y_1, y_A, y_B, x, y, retval = 1;

	if(y_start == y_end) return draw_dot(x_start, y_start);
	if (x_start < x_end) {
		dx = x_end - x_start;
		dy = y_end - y_start;
		x_1 = x_start;
		y_1 = y_start;
	} else {
		dx = x_start - x_end;
		dy = y_start - y_end;
		x_1 = x_end;
		y_1 = y_end;
	}
	if(y_start < y_end){
		y_A = y_start;
		y_B = y_end;
	}
	else{
		y_B = y_start;
		y_A = y_end;
	}
	for(y = y_A; y <= y_B; y++){
		x = (2 * dx * (y - y_1) + dy) / (2 * dy) + x_1;
		retval &= draw_dot(x, y);
	}
	return retval;
}

int32_t draw_line(int32_t x_start, int32_t y_start, int32_t x_end, int32_t y_end){
/* Your code goes here!*/
	int32_t delta_x, delta_y;
	delta_x = x_end - x_start;
	delta_y = y_end - y_start;
	if(delta_x < 0) delta_x = -delta_x;
	if(delta_y < 0) delta_y = -delta_y;
	if(delta_y > delta_x){
		return near_vertical(x_start, y_start, x_end, y_end);
	}
	else{
		return near_horizontal(x_start, y_start, x_end, y_end);
	}
}

int32_t draw_rect(int32_t x, int32_t y, int32_t w, int32_t h){
/* Your code goes here!*/
	int32_t retval = 1;
	if(h < 0 || w < 0) return 0;
	retval &= draw_line(x, y, x+w, y);
	retval &= draw_line(x, y, x, y+h);
	retval &= draw_line(x, y+h, x+w, y+h);
	retval &= draw_line(x+w, y, x+w, y+h);
	return retval;
}

int32_t draw_triangle(int32_t x_A, int32_t y_A, int32_t x_B, int32_t y_B, int32_t x_C, int32_t y_C){
/* Your code goes here!*/
	int32_t retval = 1;
	retval &= draw_line(x_A, y_A, x_B, y_B);
	retval &= draw_line(x_B, y_B, x_C, y_C);
	retval &= draw_line(x_C, y_C, x_A, y_A);
	return retval;
}

int32_t draw_parallelogram(int32_t x_A, int32_t y_A, int32_t x_B, int32_t y_B, int32_t x_C, int32_t y_C){
/* Your code goes here!*/
	int32_t delta_x, delta_y, x_D, y_D, retval = 1;
	delta_x = x_B - x_A;
	delta_y = y_B - y_A;
	x_D = x_C - delta_x;
	y_D = y_C - delta_y;
	retval &= draw_line(x_A, y_A, x_B, y_B);
	retval &= draw_line(x_B, y_B, x_C, y_C);
	retval &= draw_line(x_C, y_C, x_D, y_D);
	retval &= draw_line(x_D, y_D, x_A, y_A);
	return retval;
}

int32_t draw_circle(int32_t x, int32_t y, int32_t inner_r, int32_t outer_r){
/* Your code goes here!*/
	int32_t i, j, d, retval = 1;
	if((inner_r < 0) || (outer_r < 0) || (inner_r > outer_r)) return 0;
	for(i = x - outer_r; i <= x + outer_r; i++){
		for(j = y - outer_r; j <= y + outer_r; j++){
			d = (i - x)*(i - x) + (j - y)*(j - y);
			if((d >= inner_r*inner_r) && (d <= outer_r*outer_r)){
				retval &= draw_dot(i,j);
			}
		}
	}
	return retval;
}

int32_t rect_gradient(int32_t x, int32_t y, int32_t w, int32_t h, int32_t start_color, int32_t end_color){
	/* Your code goes here!*/
	int32_t i, j, start_red, start_green, start_blue, end_red, end_green, end_blue, red, green, blue, delta_red, delta_green, delta_blue, new_color, retval = 1;
	int32_t r_adj, g_adj, b_adj;
	if(w <= 0 || h < 0) return 0;
	start_red = (start_color >> 16) & 0x000000FF;
	start_green = (start_color >> 8) & 0x000000FF;
	start_blue = start_color & 0x000000FF;
	end_red = (end_color >> 16) & 0x000000FF;
	end_green = (end_color >> 8) & 0x000000FF;
	end_blue = end_color & 0x000000FF;
	delta_red = end_red - start_red;
	delta_green = end_green - start_green;
	delta_blue = end_blue - start_blue;
	r_adj = w * (delta_red > 0 ? 1 : (delta_red < 0 ? -1 : 0));
	g_adj = w * (delta_green > 0 ? 1 : (delta_green < 0 ? -1 : 0));
	b_adj = w * (delta_blue > 0 ? 1 : (delta_blue < 0 ? -1 : 0));
	for(i = x; i <= x + w; i++){
		red = ((i - x) * delta_red * 2 + r_adj) / (2 * w) + start_red;
		green = ((i - x) * delta_green * 2 + g_adj) / (2 * w) + start_green;
		blue = ((i - x) * delta_blue * 2  + b_adj) / (2 * w) + start_blue;
		new_color = (red << 16) + (green << 8) + blue;
		set_color(new_color);
		for(j = y; j <= y + h; j++){
			retval &= draw_dot(i,j);
		}
	}
	return retval;
}



int32_t draw_picture(){
	set_color(0);
	if(rect_gradient(150,150,410,100,60,10600) == 0) printf("asfd\n");
	return 1;
}
