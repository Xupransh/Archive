#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#include "mp5.h"
#include "mp10.h"


//
// These variables hold the heads of two singly-linked lists of
// requests.
//
// The avaialble list consists of unpaired requests: partner
// should be NULL, and next is used to form the list.
//
// The shared list consists of groups with non-empty start and end
// vertex intersections.  Only one of the requests in the group is in
// the list.  The others are linked through the first's partner field
// and then through the next field of the others in the group.  The
// next field of the first request in a group is used to form the
// shared list.
//
// Note: for MP2, you should only build groups of two in the shared
// list.
//

static request_t* available = NULL;
static request_t* shared = NULL;

void deleteAvailableRequest(request_t *curr, request_t *prev)
{
    if(prev)
    {
        prev->next = curr->next;
        curr->next = NULL;
        return;
    }
    available = NULL;
}

void
free_resources(vertex_set_t *vs_src, vertex_set_t *vs_dest, path_t *p)
{
    free_vertex_set(vs_src);
    free_vertex_set(vs_dest);
    free_path(p);
}

void freeVInt(vertex_set_t *v_int_dst,  vertex_set_t *v_int_src)
{
    free_vertex_set(v_int_src);
    free_vertex_set(v_int_dst);
}

int32_t
setPath(graph_t *g, heap_t *h, path_t *p, request_t *r, request_t *curr, vertex_set_t *v_int_src,  vertex_set_t *v_int_dst)
{
      free(r->src_vs);
      free(r->dst_vs);
      free(curr->src_vs);
      free(curr->dst_vs);
      build_vertex_set_minimap(g,v_int_dst);
      build_vertex_set_minimap(g,v_int_src);
      r->src_vs = v_int_src;
      r->dst_vs = v_int_dst;
      curr->src_vs = v_int_src;
      curr->dst_vs = v_int_dst;
      if(!dijkstra(g,h,r->src_vs,r->dst_vs,r->path))
      {
          freeVInt(v_int_dst,v_int_src);
          return 0;
      }
      build_path_minimap(g,r->path);
      return 1;
}

int32_t
handle_request (graph_t* g, pyr_tree_t* pyr, heap_t* h, request_t* r)
{
    vertex_set_t *src_vs = new_vertex_set();
    vertex_set_t *dst_vs = new_vertex_set();
    path_t *p = new_path();

    if((src_vs == NULL) || (dst_vs == NULL) || (p == NULL))
    {
        free_resources(src_vs, dst_vs, p);
        return 0;
    }
		//build source vertex set
		find_nodes(&(r->from), src_vs, pyr, 0);
		find_nodes(&(r->to), dst_vs, pyr, 0);

		if(dst_vs->count == 0 || src_vs->count == 0)
		{
        free_resources(src_vs, dst_vs, p);
        return 0;
    }

    build_vertex_set_minimap(g,src_vs);
    build_vertex_set_minimap(g,dst_vs);

    r->src_vs = src_vs;
    r->dst_vs = dst_vs;
    r->path = p;

    if(!available)
    {
        available = r;
        r->next = NULL;
        r->partner = NULL;
        return 1;
    }

    request_t *curr = available;
    request_t *prev = NULL;
    request_t *shared_iterator = NULL;
    while(curr)
    {
        vertex_set_t *v_int_src = new_vertex_set();
        vertex_set_t *v_int_dst = new_vertex_set();

        if(!(v_int_src) || !(v_int_dst))
        {
            freeVInt(v_int_dst, v_int_src);
            return 0;
        }
        if(!merge_vertex_sets(r->src_vs, curr->src_vs, v_int_src))
        {
            prev = curr;
            curr = curr->next;
            continue;
        }
        if(!merge_vertex_sets(r->dst_vs, curr->dst_vs, v_int_dst))
        {
            free_vertex_set(v_int_src);
            vertex_set_t *v_int_src = new_vertex_set();
            if(!v_int_src)
                return 0;
            prev = curr;
            curr = curr->next;
            continue;
        }
        if(!shared)
        {
            if(!setPath(g,h,p,r,curr,v_int_src,v_int_dst))
            {
                free_resources(src_vs, dst_vs, p);
                return 0;
            }
            shared = r;
            shared->partner = curr;
            shared->next = NULL;
            deleteAvailableRequest(curr, prev);
            return 1;
        }
        else
        {
            if(!setPath(g,h,p,r,curr,v_int_src,v_int_dst))
            {
                free_resources(src_vs, dst_vs, p);
                return 0;
            }
            shared_iterator = shared;
            while(shared_iterator->next)
                shared_iterator = shared_iterator->next;
            shared_iterator->next = r;
            r->partner = curr;
            r->next = NULL;
            deleteAvailableRequest(curr,prev);
            return 1;
        }
    }

    curr = available;
    while(curr->next)
        curr=curr->next;
    curr->next = r;
    r->next = NULL;
    r->partner = NULL;
    return 1;

}


void
print_results ()
{
    request_t* r;
    request_t* prt;

    printf ("Matched requests:\n");
    for (r = shared; NULL != r; r = r->next) {
        printf ("%5d", r->uid);
	for (prt = r->partner; NULL != prt; prt = prt->next) {
	    printf (" %5d", prt->uid);
	}
	printf (" src=%016lX dst=%016lX path=%016lX\n", r->src_vs->minimap,
		r->dst_vs->minimap, r->path->minimap);
    }

    printf ("\nUnmatched requests:\n");
    for (r = available; NULL != r; r = r->next) {
        printf ("%5d src=%016lX dst=%016lX\n", r->uid, r->src_vs->minimap,
		r->dst_vs->minimap);
    }
}


int32_t
show_results_for (graph_t* g, int32_t which)
{
    request_t* r;
    request_t* prt;

    // Can only illustrate one partner.
    for (r = shared; NULL != r; r = r->next) {
	if (which == r->uid) {
	    return show_find_results (g, r, r->partner);
	}
	for (prt = r->partner; NULL != prt; prt = prt->next) {
	    if (which == prt->uid) {
		return show_find_results (g, prt, r);
	    }
	}
    }

    for (r = available; NULL != r; r = r->next) {
        if (which == r->uid) {
	    return show_find_results (g, r, r);
	}
    }
    return 0;
}


static void
free_request (request_t* r)
{
    free_vertex_set (r->src_vs);
    free_vertex_set (r->dst_vs);
    if (NULL != r->path) {
	free_path (r->path);
    }
    free (r);
}

void
free_all_data ()
{
    request_t* r;
    request_t* prt;
    request_t* next;

    // All requests in a group share source and destination vertex sets
    // as well as a path, so we need free those elements only once.
    for (r = shared; NULL != r; r = next) {
	for (prt = r->partner; NULL != prt; prt = next) {
	    next = prt->next;
	    free (prt);
	}
	next = r->next;
	free_request (r);
    }

    for (r = available; NULL != r; r = next) {
	next = r->next;
	free_request (r);
    }
}
